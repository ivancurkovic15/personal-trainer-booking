<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Admin Dashboard - Personal Trainer</title>
    <style>
        * { margin: 0; padding: 0; box-sizing: border-box; }
        body { font-family: Arial, sans-serif; background: #f5f5f5; }
        .header { background: white; padding: 20px; box-shadow: 0 2px 5px rgba(0,0,0,0.1); display: flex; justify-content: space-between; align-items: center; }
        .header h1 { color: #333; }
        .user-info { color: #666; }
        .logout-btn { background: #dc3545; color: white; padding: 8px 16px; border: none; border-radius: 4px; text-decoration: none; }
        .container { max-width: 1400px; margin: 0 auto; padding: 20px; }
        .stats { display: grid; grid-template-columns: repeat(auto-fit, minmax(250px, 1fr)); gap: 20px; margin-bottom: 30px; }
        .stat-card { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); text-align: center; }
        .stat-number { font-size: 2.5em; font-weight: bold; color: #4CAF50; margin-bottom: 10px; }
        .stat-label { color: #666; font-size: 1.1em; }
        .dashboard-grid { display: grid; grid-template-columns: 1fr 1fr; gap: 20px; }
        .panel { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); }
        .panel h3 { margin-bottom: 20px; color: #333; border-bottom: 2px solid #4CAF50; padding-bottom: 10px; }
        .form-group { margin-bottom: 15px; }
        .form-group label { display: block; margin-bottom: 5px; font-weight: bold; }
        .form-group input, .form-group select { width: 100%; padding: 10px; border: 1px solid #ddd; border-radius: 4px; }
        .btn { padding: 10px 20px; background: #4CAF50; color: white; border: none; border-radius: 4px; cursor: pointer; }
        .btn:hover { background: #45a049; }
        .btn-danger { background: #dc3545; }
        .btn-danger:hover { background: #c82333; }
        .btn-small { padding: 5px 10px; font-size: 0.9em; }
        .session-item { background: #f9f9f9; padding: 15px; margin-bottom: 10px; border-radius: 5px; border-left: 4px solid #4CAF50; }
        .session-item.body-health { border-left-color: #2196F3; }
        .session-item.regular-training { border-left-color: #FF9800; }
        .session-date { font-weight: bold; color: #333; margin-bottom: 8px; }
        .session-details { color: #666; margin-bottom: 8px; }
        .exercise-type { display: inline-block; padding: 4px 8px; border-radius: 12px; font-size: 0.8em; font-weight: bold; color: white; margin-right: 10px; }
        .exercise-type.body-health { background: #2196F3; }
        .exercise-type.regular-training { background: #FF9800; }
        .booking-item { background: #fff; padding: 15px; margin: 10px 0; border-left: 3px solid #4CAF50; border-radius: 3px; }
        .scrollable { max-height: 500px; overflow-y: auto; }
        
        /* Notes functionality styles */
        .notes-section { margin-top: 10px; padding-top: 10px; border-top: 1px solid #eee; }
        .notes-textarea { width: 100%; min-height: 60px; padding: 8px; border: 1px solid #ddd; border-radius: 4px; resize: vertical; font-family: Arial, sans-serif; font-size: 0.9em; }
        .notes-controls { display: flex; gap: 10px; margin-top: 5px; align-items: center; }
        .save-notes-btn { background: #4CAF50; color: white; border: none; padding: 6px 12px; border-radius: 3px; cursor: pointer; font-size: 0.8em; }
        .save-notes-btn:hover { background: #45a049; }
        .notes-saved { color: #28a745; font-size: 0.8em; font-weight: bold; }
        
        /* Calendar Styles */
        .calendar-section { background: white; padding: 20px; border-radius: 8px; box-shadow: 0 2px 10px rgba(0,0,0,0.1); margin-bottom: 20px; }
        .calendar-container { max-width: 600px; margin: 0 auto; }
        .calendar-header { display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px; }
        .calendar-nav { background: #4CAF50; color: white; border: none; padding: 8px 12px; border-radius: 4px; cursor: pointer; }
        .calendar-nav:hover { background: #45a049; }
        .calendar-title { font-size: 1.2em; font-weight: bold; color: #333; }
        .calendar-grid { display: grid; grid-template-columns: repeat(7, 1fr); gap: 2px; }
        .calendar-day-header { background: #f0f0f0; padding: 10px; text-align: center; font-weight: bold; color: #666; }
        .calendar-day { 
            background: white; 
            border: 1px solid #e0e0e0; 
            padding: 8px; 
            min-height: 60px; 
            cursor: pointer; 
            transition: all 0.3s; 
            position: relative;
            display: flex;
            flex-direction: column;
        }
        .calendar-day:hover { background: #f5f5f5; }
        .calendar-day.other-month { color: #ccc; background: #f9f9f9; }
        .calendar-day.has-sessions { background: #e8f5e8; border-color: #4CAF50; }
        .calendar-day.has-sessions:hover { background: #d4edda; }
        .calendar-day-number { font-weight: bold; margin-bottom: 2px; }
        .calendar-session-count { 
            background: #4CAF50; 
            color: white; 
            border-radius: 10px; 
            padding: 2px 6px; 
            font-size: 0.7em; 
            text-align: center;
            margin-top: auto;
        }
        
        /* Modal Styles */
        .modal { 
            display: none; 
            position: fixed; 
            z-index: 1000; 
            left: 0; 
            top: 0; 
            width: 100%; 
            height: 100%; 
            background-color: rgba(0,0,0,0.5); 
        }
        .modal-content { 
            background-color: white; 
            margin: 5% auto; 
            padding: 20px; 
            border-radius: 8px; 
            width: 90%; 
            max-width: 600px; 
            max-height: 80vh;
            overflow-y: auto;
        }
        .modal-header { 
            display: flex; 
            justify-content: space-between; 
            align-items: center; 
            margin-bottom: 20px; 
            padding-bottom: 10px; 
            border-bottom: 2px solid #4CAF50; 
        }
        .close { 
            color: #aaa; 
            font-size: 28px; 
            font-weight: bold; 
            cursor: pointer; 
        }
        .close:hover { color: #000; }
        .session-modal-item { 
            background: #f9f9f9; 
            padding: 15px; 
            margin-bottom: 10px; 
            border-radius: 5px; 
            cursor: pointer; 
            transition: all 0.3s;
            border-left: 4px solid transparent;
        }
        .session-modal-item:hover { background: #f0f0f0; }
        .session-modal-item.body-health { border-left-color: #2196F3; }
        .session-modal-item.regular-training { border-left-color: #FF9800; }
        .member-item { 
            background: white; 
            padding: 15px; 
            margin: 8px 0; 
            border-left: 3px solid #4CAF50; 
            border-radius: 3px; 
        }
        
        @media (max-width: 768px) {
            .dashboard-grid { grid-template-columns: 1fr; }
            .calendar-day { min-height: 50px; padding: 4px; }
            .calendar-day-number { font-size: 0.9em; }
            .calendar-session-count { font-size: 0.6em; padding: 1px 4px; }
        }
    </style>
</head>
<body>
    <div class="header">
        <h1>üèÉ‚Äç‚ôÄÔ∏è Admin Dashboard</h1>
        <div>
            <span class="user-info">Welcome, <%= user.name %></span>
            <a href="/logout" class="logout-btn">Logout</a>
        </div>
    </div>

    <div class="container">
        <div class="stats">
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalSessions %></div>
                <div class="stat-label">Total Sessions Created</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.activeSessions %></div>
                <div class="stat-label">Active Upcoming Sessions</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalBookings %></div>
                <div class="stat-label">Total Bookings</div>
            </div>
            <div class="stat-card">
                <div class="stat-number"><%= stats.totalClients %></div>
                <div class="stat-label">Total Clients</div>
            </div>
        </div>

        <!-- Calendar Section -->
        <div class="calendar-section">
            <h3>üìÖ Training Calendar</h3>
            <div class="calendar-container">
                <div class="calendar-header">
                    <button class="calendar-nav" onclick="previousMonth()">‚Äπ Previous</button>
                    <div class="calendar-title" id="calendarTitle"></div>
                    <button class="calendar-nav" onclick="nextMonth()">Next ‚Ä∫</button>
                </div>
                <div class="calendar-grid" id="calendarGrid">
                    <div class="calendar-day-header">Sun</div>
                    <div class="calendar-day-header">Mon</div>
                    <div class="calendar-day-header">Tue</div>
                    <div class="calendar-day-header">Wed</div>
                    <div class="calendar-day-header">Thu</div>
                    <div class="calendar-day-header">Fri</div>
                    <div class="calendar-day-header">Sat</div>
                </div>
            </div>
        </div>

        <div class="dashboard-grid">
            <!-- Create Session Panel -->
            <div class="panel">
                <h3>‚ûï Create New Training Session</h3>
                <form id="sessionForm">
                    <div class="form-group">
                        <label>Date</label>
                        <input type="date" name="date" required min="<%= moment().format('YYYY-MM-DD') %>">
                    </div>
                    <div class="form-group">
                        <label>Time</label>
                        <select name="time" required>
                            <option value="">Select time</option>
                            <option value="07:00">07:00</option>
                            <option value="08:00">08:00</option>
                            <option value="09:00">09:00</option>
                            <option value="10:00">10:00</option>
                            <option value="11:00">11:00</option>
                            <option value="12:00">12:00</option>
                            <option value="14:00">14:00</option>
                            <option value="15:00">15:00</option>
                            <option value="16:00">16:00</option>
                            <option value="17:00">17:00</option>
                            <option value="18:00">18:00</option>
                            <option value="19:00">19:00</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Exercise Type</label>
                        <select name="exerciseType" required>
                            <option value="">Choose exercise type</option>
                            <option value="body-health">Body Health</option>
                            <option value="regular-training">Regular Training</option>
                        </select>
                    </div>
                    <div class="form-group">
                        <label>Maximum Capacity (1-4 people)</label>
                        <select name="maxCapacity" required>
                            <option value="">Max people allowed</option>
                            <option value="1">1 person</option>
                            <option value="2">2 people</option>
                            <option value="3">3 people</option>
                            <option value="4">4 people</option>
                        </select>
                    </div>
                    <button type="submit" class="btn">Create Session</button>
                </form>
            </div>

            <!-- Sessions Overview -->
            <div class="panel">
                <h3>üìÖ Your Training Sessions</h3>
                <div class="scrollable">
                    <% if (sessions.length === 0) { %>
                        <p style="color: #666; text-align: center; padding: 20px;">No sessions created yet</p>
                    <% } else { %>
                        <% sessions.forEach(session => { %>
                            <div class="session-item <%= session.exerciseType %>">
                                <div class="session-date">
                                    üìÖ <%= moment(session.date).format('MMM DD, YYYY') %> at <%= session.time %>
                                    <% if (moment(session.date).isBefore(moment())) { %>
                                        <span style="color: #999; font-size: 0.8em;">(Past)</span>
                                    <% } %>
                                </div>
                                <div class="session-details">
                                    <span class="exercise-type <%= session.exerciseType %>">
                                        <%= session.exerciseType === 'body-health' ? 'Body Health' : 'Regular Training' %>
                                    </span>
                                    üë• Capacity: <%= session.currentBookings || 0 %>/<%= session.maxCapacity %> people
                                    <% if (!session.isActive) { %>
                                        <span style="color: #999;">(Inactive)</span>
                                    <% } %>
                                </div>
                                <div style="margin-top: 10px;">
                                    <button class="btn btn-danger" onclick="deleteSession('<%= session._id %>')">
                                        üóëÔ∏è Delete Session
                                    </button>
                                </div>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
            </div>
        </div>

        <!-- Client Bookings Section -->
        <div class="panel" style="margin-top: 20px;">
            <h3>üë• Client Bookings</h3>
            <div class="scrollable">
                <% if (bookings.length === 0) { %>
                    <p style="color: #666; text-align: center; padding: 20px;">No bookings yet</p>
                <% } else { %>
                    <% bookings.forEach(booking => { %>
                        <div class="booking-item">
                            <div style="display: flex; justify-content: space-between; align-items: start;">
                                <div style="flex: 1;">
                                    <div style="font-weight: bold; color: #333; margin-bottom: 5px;">
                                        üë§ <%= booking.client.name %>
                                    </div>
                                    <div style="color: #666; font-size: 0.9em; margin-bottom: 5px;">
                                        üìÖ <%= moment(booking.session.date).format('MMM DD, YYYY') %> at <%= booking.session.time %>
                                    </div>
                                    <div style="color: #666; font-size: 0.9em; margin-bottom: 5px;">
                                        <span class="exercise-type <%= booking.session.exerciseType %>">
                                            <%= booking.session.exerciseType === 'body-health' ? 'Body Health' : 'Regular Training' %>
                                        </span>
                                        üë• <%= booking.groupSize %> <%= booking.groupSize === 1 ? 'person' : 'people' %>
                                    </div>
                                    <div style="color: #666; font-size: 0.8em;">
                                        üìß <%= booking.client.email %> | üì± <%= booking.client.phone || 'No phone' %>
                                    </div>
                                </div>
                                <div>
                                    <button class="btn btn-danger" onclick="deleteBooking('<%= booking._id %>')">
                                        üóëÔ∏è Cancel
                                    </button>
                                </div>
                            </div>
                            <!-- Notes Section -->
                            <div class="notes-section">
                                <label style="font-size: 0.9em; font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Session Notes:</label>
                                <textarea 
                                    id="notes-<%= booking._id %>" 
                                    class="notes-textarea" 
                                    placeholder="Add notes about this client's session..."
                                ><%= booking.notes || '' %></textarea>
                                <div class="notes-controls">
                                    <button class="save-notes-btn" onclick="saveBookingNotes('<%= booking._id %>')">
                                        üíæ Save Notes
                                    </button>
                                    <span id="notes-status-<%= booking._id %>" class="notes-saved" style="display: none;">‚úÖ Saved!</span>
                                </div>
                            </div>
                        </div>
                    <% }); %>
                <% } %>
            </div>
        </div>
    </div>

    <!-- Sessions Modal -->
    <div id="sessionsModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="sessionsModalTitle">Sessions for Date</h3>
                <span class="close" onclick="closeModal('sessionsModal')">&times;</span>
            </div>
            <div id="sessionsModalContent">
                <!-- Sessions will be loaded here -->
            </div>
        </div>
    </div>

    <!-- Members Modal -->
    <div id="membersModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="membersModalTitle">Session Members</h3>
                <span class="close" onclick="closeModal('membersModal')">&times;</span>
            </div>
            <div id="membersModalContent">
                <!-- Members will be loaded here -->
            </div>
        </div>
    </div>

    <script>
        let currentDate = new Date();
        let currentMonthSessions = [];

        // Initialize calendar on page load
        document.addEventListener('DOMContentLoaded', function() {
            loadCalendarMonth();
        });

        async function loadCalendarMonth() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth() + 1; // API expects 1-12
            
            try {
                const response = await fetch(`/api/calendar/${year}/${month}`);
                
                if (!response.ok) {
                    console.error('Response not ok:', response.status, response.statusText);
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const contentType = response.headers.get('content-type');
                if (!contentType || !contentType.includes('application/json')) {
                    console.error('Response is not JSON, content-type:', contentType);
                    const text = await response.text();
                    console.error('Response text:', text.substring(0, 200));
                    throw new Error('Response is not JSON');
                }
                
                const sessions = await response.json();
                currentMonthSessions = sessions;
                renderCalendar();
            } catch (error) {
                console.error('Error loading calendar:', error);
                currentMonthSessions = [];
                renderCalendar();
            }
        }

        function renderCalendar() {
            const year = currentDate.getFullYear();
            const month = currentDate.getMonth();
            
            const monthNames = ["January", "February", "March", "April", "May", "June",
                "July", "August", "September", "October", "November", "December"];
            document.getElementById('calendarTitle').textContent = `${monthNames[month]} ${year}`;
            
            const firstDay = new Date(year, month, 1);
            const startDate = new Date(firstDay);
            startDate.setDate(startDate.getDate() - firstDay.getDay());
            
            const calendarGrid = document.getElementById('calendarGrid');
            const dayCells = calendarGrid.querySelectorAll('.calendar-day');
            dayCells.forEach(cell => cell.remove());
            
            for (let i = 0; i < 42; i++) {
                const date = new Date(startDate);
                date.setDate(startDate.getDate() + i);
                
                const dayElement = document.createElement('div');
                dayElement.className = 'calendar-day';
                
                if (date.getMonth() !== month) {
                    dayElement.classList.add('other-month');
                }
                
                const dayNumber = document.createElement('div');
                dayNumber.className = 'calendar-day-number';
                dayNumber.textContent = date.getDate();
                dayElement.appendChild(dayNumber);
                
                // Check for sessions on this date (timezone-aware)
                const calYear = date.getFullYear();
                const calMonth = date.getMonth();
                const calDay = date.getDate();

                const daySessions = currentMonthSessions.filter(session => {
                    const sessionDate = new Date(session.date);
                    return sessionDate.getFullYear() === calYear && 
                           sessionDate.getMonth() === calMonth && 
                           sessionDate.getDate() === calDay;
                });
                
                if (daySessions.length > 0) {
                    dayElement.classList.add('has-sessions');
                    const sessionCount = document.createElement('div');
                    sessionCount.className = 'calendar-session-count';
                    sessionCount.textContent = `${daySessions.length} session${daySessions.length > 1 ? 's' : ''}`;
                    dayElement.appendChild(sessionCount);
                }
                
                dayElement.addEventListener('click', () => {
                    const dateString = `${calYear}-${String(calMonth + 1).padStart(2, '0')}-${String(calDay).padStart(2, '0')}`;
                    showSessionsForDate(dateString);
                });
                
                calendarGrid.appendChild(dayElement);
            }
        }

        async function previousMonth() {
            currentDate.setMonth(currentDate.getMonth() - 1);
            await loadCalendarMonth();
        }

        async function nextMonth() {
            currentDate.setMonth(currentDate.getMonth() + 1);
            await loadCalendarMonth();
        }

        async function showSessionsForDate(dateString) {
            const modal = document.getElementById('sessionsModal');
            const title = document.getElementById('sessionsModalTitle');
            const content = document.getElementById('sessionsModalContent');
            
            try {
                const response = await fetch(`/api/sessions/date/${dateString}`);
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const sessions = await response.json();
                
                const date = new Date(dateString);
                const formatDate = date.toLocaleDateString('en-US', { 
                    weekday: 'long', 
                    year: 'numeric', 
                    month: 'long', 
                    day: 'numeric' 
                });
                
                title.textContent = `Sessions for ${formatDate}`;
                
                if (sessions.length === 0) {
                    content.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No sessions scheduled for this date.</p>';
                } else {
                    content.innerHTML = sessions.map(session => `
                        <div class="session-modal-item ${session.exerciseType}" onclick="showSessionMembers('${session._id}')">
                            <div style="display: flex; justify-content: space-between; align-items: center;">
                                <div>
                                    <div style="font-weight: bold; color: #333; margin-bottom: 5px;">
                                        üïê ${session.time}
                                    </div>
                                    <div style="margin-bottom: 5px;">
                                        <span class="exercise-type ${session.exerciseType}">
                                            ${session.exerciseType === 'body-health' ? 'Body Health' : 'Regular Training'}
                                        </span>
                                    </div>
                                    <div style="color: #666; font-size: 0.9em;">
                                        üë• ${session.currentBookings}/${session.maxCapacity} people booked
                                    </div>
                                </div>
                                <div style="color: #4CAF50; font-size: 1.2em;">
                                    ${session.bookings.length > 0 ? 'üë•' : '‚≠ï'}
                                </div>
                            </div>
                        </div>
                    `).join('');
                }
                
                modal.style.display = 'block';
            } catch (error) {
                console.error('Error loading sessions:', error);
                title.textContent = 'Error Loading Sessions';
                content.innerHTML = `<p style="text-align: center; color: #ff0000; padding: 20px;">Error: ${error.message}</p>`;
                modal.style.display = 'block';
            }
        }

        async function showSessionMembers(sessionId) {
            const modal = document.getElementById('membersModal');
            const title = document.getElementById('membersModalTitle');
            const content = document.getElementById('membersModalContent');
            
            try {
                const response = await fetch(`/api/session/${sessionId}/details`);
                const session = await response.json();
                
                title.textContent = `Members for ${session.time} - ${session.exerciseType === 'body-health' ? 'Body Health' : 'Regular Training'}`;
                
                if (session.bookings.length === 0) {
                    content.innerHTML = '<p style="text-align: center; color: #666; padding: 20px;">No one has booked this session yet.</p>';
                } else {
                    content.innerHTML = session.bookings.map(booking => `
                        <div class="member-item">
                            <div style="font-weight: bold; color: #333; margin-bottom: 5px;">
                                üë§ ${booking.client.name}
                            </div>
                            <div style="color: #666; font-size: 0.9em; margin-bottom: 3px;">
                                üìß ${booking.client.email}
                            </div>
                            <div style="color: #666; font-size: 0.9em; margin-bottom: 3px;">
                                üì± ${booking.client.phone || 'No phone number'}
                            </div>
                            <div style="color: #666; font-size: 0.9em; margin-bottom: 8px;">
                                üë• Booked for ${booking.groupSize} ${booking.groupSize === 1 ? 'person' : 'people'}
                            </div>
                            
                            <!-- Notes Section in Modal -->
                            <div style="margin-top: 10px; padding-top: 10px; border-top: 1px solid #eee;">
                                <label style="font-size: 0.9em; font-weight: bold; color: #333; margin-bottom: 5px; display: block;">Session Notes:</label>
                                <textarea 
                                    id="modal-notes-${booking._id}" 
                                    class="notes-textarea" 
                                    placeholder="Add notes about this client's session..."
                                >${booking.notes || ''}</textarea>
                                <div class="notes-controls">
                                    <button class="save-notes-btn" onclick="saveBookingNotesFromModal('${booking._id}')">
                                        üíæ Save Notes
                                    </button>
                                    <span id="modal-notes-status-${booking._id}" class="notes-saved" style="display: none;">‚úÖ Saved!</span>
                                </div>
                            </div>
                            
                            <div style="margin-top: 8px;">
                                <button class="btn btn-danger btn-small" onclick="deleteBooking('${booking._id}')">
                                    üóëÔ∏è Cancel Booking
                                </button>
                            </div>
                        </div>
                    `).join('');
                }
                
                document.getElementById('sessionsModal').style.display = 'none';
                modal.style.display = 'block';
            } catch (error) {
                console.error('Error loading session members:', error);
                content.innerHTML = '<p style="text-align: center; color: #ff0000; padding: 20px;">Error loading session members.</p>';
                document.getElementById('sessionsModal').style.display = 'none';
                modal.style.display = 'block';
            }
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
        }

        window.onclick = function(event) {
            const sessionsModal = document.getElementById('sessionsModal');
            const membersModal = document.getElementById('membersModal');
            if (event.target === sessionsModal) {
                sessionsModal.style.display = 'none';
            }
            if (event.target === membersModal) {
                membersModal.style.display = 'none';
            }
        }

        // Handle session creation
        document.getElementById('sessionForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const formData = new FormData(e.target);
            const sessionData = {
                date: formData.get('date'),
                time: formData.get('time'),
                exerciseType: formData.get('exerciseType'),
                maxCapacity: formData.get('maxCapacity')
            };
            
            try {
                const response = await fetch('/api/session', {
                    method: 'POST',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify(sessionData)
                });
                
                const result = await response.json();
                
                if (result.success) {
                    alert('Session created successfully!');
                    location.reload();
                } else {
                    alert('Error: ' + result.error);
                }
            } catch (error) {
                alert('Error creating session: ' + error.message);
            }
        });

        // Delete session
        async function deleteSession(sessionId) {
            if (!confirm('Are you sure you want to delete this session? This will also cancel all bookings for this session.')) {
                return;
            }

            try {
                const response = await fetch(`/api/session/${sessionId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    alert('Session deleted successfully!');
                    location.reload();
                } else {
                    alert('Error deleting session: ' + result.error);
                }
            } catch (error) {
                alert('Error deleting session: ' + error.message);
            }
        }

        // Delete booking
        async function deleteBooking(bookingId) {
            if (!confirm('Are you sure you want to cancel this booking?')) {
                return;
            }

            try {
                const response = await fetch(`/api/booking/${bookingId}`, {
                    method: 'DELETE'
                });

                const result = await response.json();

                if (result.success) {
                    alert('Booking cancelled successfully!');
                    location.reload();
                } else {
                    alert('Error cancelling booking: ' + result.error);
                }
            } catch (error) {
                alert('Error cancelling booking: ' + error.message);
            }
        }

        // Save booking notes from main booking list
        async function saveBookingNotes(bookingId) {
            const notesTextarea = document.getElementById(`notes-${bookingId}`);
            const statusSpan = document.getElementById(`notes-status-${bookingId}`);
            const notes = notesTextarea.value;
            
            try {
                const response = await fetch(`/api/booking/${bookingId}/notes`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notes })
                });

                const result = await response.json();

                if (result.success) {
                    // Show success feedback
                    statusSpan.style.display = 'inline';
                    setTimeout(() => {
                        statusSpan.style.display = 'none';
                    }, 3000);
                } else {
                    alert('Error saving notes: ' + result.error);
                }
            } catch (error) {
                alert('Error saving notes: ' + error.message);
            }
        }

        // Save booking notes from modal
        async function saveBookingNotesFromModal(bookingId) {
            const notesTextarea = document.getElementById(`modal-notes-${bookingId}`);
            const statusSpan = document.getElementById(`modal-notes-status-${bookingId}`);
            const notes = notesTextarea.value;
            
            try {
                const response = await fetch(`/api/booking/${bookingId}/notes`, {
                    method: 'PUT',
                    headers: { 'Content-Type': 'application/json' },
                    body: JSON.stringify({ notes })
                });

                const result = await response.json();

                if (result.success) {
                    // Show success feedback
                    statusSpan.style.display = 'inline';
                    setTimeout(() => {
                        statusSpan.style.display = 'none';
                    }, 3000);
                    
                    // Also update the main booking list textarea if it exists
                    const mainTextarea = document.getElementById(`notes-${bookingId}`);
                    if (mainTextarea) {
                        mainTextarea.value = notes;
                    }
                } else {
                    alert('Error saving notes: ' + result.error);
                }
            } catch (error) {
                alert('Error saving notes: ' + error.message);
            }
        }
    </script>
</body>
</html>